// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"recognition-wall/internal/data/ent/feedback"
	"recognition-wall/internal/data/ent/like"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Feedback is the model entity for the Feedback schema.
type Feedback struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedbackQuery when eager-loading is set.
	Edges FeedbackEdges `json:"edges"`
}

// FeedbackEdges holds the relations/edges for other nodes in the graph.
type FeedbackEdges struct {
	// Like holds the value of the like edge.
	Like *Like `json:"like,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LikeOrErr returns the Like value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedbackEdges) LikeOrErr() (*Like, error) {
	if e.loadedTypes[0] {
		if e.Like == nil {
			// The edge like was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: like.Label}
		}
		return e.Like, nil
	}
	return nil, &NotLoadedError{edge: "like"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feedback) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedback.FieldID:
			values[i] = new(sql.NullInt64)
		case feedback.FieldName, feedback.FieldContent:
			values[i] = new(sql.NullString)
		case feedback.FieldCreatedAt, feedback.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Feedback", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feedback fields.
func (f *Feedback) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedback.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int64(value.Int64)
		case feedback.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case feedback.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				f.Content = value.String
			}
		case feedback.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case feedback.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryLike queries the "like" edge of the Feedback entity.
func (f *Feedback) QueryLike() *LikeQuery {
	return (&FeedbackClient{config: f.config}).QueryLike(f)
}

// Update returns a builder for updating this Feedback.
// Note that you need to call Feedback.Unwrap() before calling this method if this Feedback
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feedback) Update() *FeedbackUpdateOne {
	return (&FeedbackClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Feedback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feedback) Unwrap() *Feedback {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feedback is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feedback) String() string {
	var builder strings.Builder
	builder.WriteString("Feedback(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", content=")
	builder.WriteString(f.Content)
	builder.WriteString(", created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Feedbacks is a parsable slice of Feedback.
type Feedbacks []*Feedback

func (f Feedbacks) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
