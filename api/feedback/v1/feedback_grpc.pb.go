// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: api/feedback/v1/feedback.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedbackServiceClient is the client API for FeedbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbackServiceClient interface {
	CreateFeedback(ctx context.Context, in *CreateFeedbackRequest, opts ...grpc.CallOption) (*CreateFeedbackReply, error)
	UpdateFeedback(ctx context.Context, in *UpdateFeedbackRequest, opts ...grpc.CallOption) (*UpdateFeedbackReply, error)
	DeleteFeedback(ctx context.Context, in *DeleteFeedbackRequest, opts ...grpc.CallOption) (*DeleteFeedbackReply, error)
	GetFeedback(ctx context.Context, in *GetFeedbackRequest, opts ...grpc.CallOption) (*GetFeedbackReply, error)
	ListFeedback(ctx context.Context, in *ListFeedbackRequest, opts ...grpc.CallOption) (*ListFeedbackReply, error)
	Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeReply, error)
}

type feedbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackServiceClient(cc grpc.ClientConnInterface) FeedbackServiceClient {
	return &feedbackServiceClient{cc}
}

func (c *feedbackServiceClient) CreateFeedback(ctx context.Context, in *CreateFeedbackRequest, opts ...grpc.CallOption) (*CreateFeedbackReply, error) {
	out := new(CreateFeedbackReply)
	err := c.cc.Invoke(ctx, "/api.feedback.v1.FeedbackService/CreateFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) UpdateFeedback(ctx context.Context, in *UpdateFeedbackRequest, opts ...grpc.CallOption) (*UpdateFeedbackReply, error) {
	out := new(UpdateFeedbackReply)
	err := c.cc.Invoke(ctx, "/api.feedback.v1.FeedbackService/UpdateFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) DeleteFeedback(ctx context.Context, in *DeleteFeedbackRequest, opts ...grpc.CallOption) (*DeleteFeedbackReply, error) {
	out := new(DeleteFeedbackReply)
	err := c.cc.Invoke(ctx, "/api.feedback.v1.FeedbackService/DeleteFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) GetFeedback(ctx context.Context, in *GetFeedbackRequest, opts ...grpc.CallOption) (*GetFeedbackReply, error) {
	out := new(GetFeedbackReply)
	err := c.cc.Invoke(ctx, "/api.feedback.v1.FeedbackService/GetFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) ListFeedback(ctx context.Context, in *ListFeedbackRequest, opts ...grpc.CallOption) (*ListFeedbackReply, error) {
	out := new(ListFeedbackReply)
	err := c.cc.Invoke(ctx, "/api.feedback.v1.FeedbackService/ListFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeReply, error) {
	out := new(LikeReply)
	err := c.cc.Invoke(ctx, "/api.feedback.v1.FeedbackService/Like", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackServiceServer is the server API for FeedbackService service.
// All implementations must embed UnimplementedFeedbackServiceServer
// for forward compatibility
type FeedbackServiceServer interface {
	CreateFeedback(context.Context, *CreateFeedbackRequest) (*CreateFeedbackReply, error)
	UpdateFeedback(context.Context, *UpdateFeedbackRequest) (*UpdateFeedbackReply, error)
	DeleteFeedback(context.Context, *DeleteFeedbackRequest) (*DeleteFeedbackReply, error)
	GetFeedback(context.Context, *GetFeedbackRequest) (*GetFeedbackReply, error)
	ListFeedback(context.Context, *ListFeedbackRequest) (*ListFeedbackReply, error)
	Like(context.Context, *LikeRequest) (*LikeReply, error)
	mustEmbedUnimplementedFeedbackServiceServer()
}

// UnimplementedFeedbackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeedbackServiceServer struct {
}

func (UnimplementedFeedbackServiceServer) CreateFeedback(context.Context, *CreateFeedbackRequest) (*CreateFeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedback not implemented")
}
func (UnimplementedFeedbackServiceServer) UpdateFeedback(context.Context, *UpdateFeedbackRequest) (*UpdateFeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedback not implemented")
}
func (UnimplementedFeedbackServiceServer) DeleteFeedback(context.Context, *DeleteFeedbackRequest) (*DeleteFeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeedback not implemented")
}
func (UnimplementedFeedbackServiceServer) GetFeedback(context.Context, *GetFeedbackRequest) (*GetFeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedback not implemented")
}
func (UnimplementedFeedbackServiceServer) ListFeedback(context.Context, *ListFeedbackRequest) (*ListFeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedback not implemented")
}
func (UnimplementedFeedbackServiceServer) Like(context.Context, *LikeRequest) (*LikeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedFeedbackServiceServer) mustEmbedUnimplementedFeedbackServiceServer() {}

// UnsafeFeedbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbackServiceServer will
// result in compilation errors.
type UnsafeFeedbackServiceServer interface {
	mustEmbedUnimplementedFeedbackServiceServer()
}

func RegisterFeedbackServiceServer(s grpc.ServiceRegistrar, srv FeedbackServiceServer) {
	s.RegisterService(&FeedbackService_ServiceDesc, srv)
}

func _FeedbackService_CreateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).CreateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.feedback.v1.FeedbackService/CreateFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).CreateFeedback(ctx, req.(*CreateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_UpdateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).UpdateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.feedback.v1.FeedbackService/UpdateFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).UpdateFeedback(ctx, req.(*UpdateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_DeleteFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).DeleteFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.feedback.v1.FeedbackService/DeleteFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).DeleteFeedback(ctx, req.(*DeleteFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_GetFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GetFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.feedback.v1.FeedbackService/GetFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GetFeedback(ctx, req.(*GetFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_ListFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).ListFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.feedback.v1.FeedbackService/ListFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).ListFeedback(ctx, req.(*ListFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.feedback.v1.FeedbackService/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).Like(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbackService_ServiceDesc is the grpc.ServiceDesc for FeedbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.feedback.v1.FeedbackService",
	HandlerType: (*FeedbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeedback",
			Handler:    _FeedbackService_CreateFeedback_Handler,
		},
		{
			MethodName: "UpdateFeedback",
			Handler:    _FeedbackService_UpdateFeedback_Handler,
		},
		{
			MethodName: "DeleteFeedback",
			Handler:    _FeedbackService_DeleteFeedback_Handler,
		},
		{
			MethodName: "GetFeedback",
			Handler:    _FeedbackService_GetFeedback_Handler,
		},
		{
			MethodName: "ListFeedback",
			Handler:    _FeedbackService_ListFeedback_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _FeedbackService_Like_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/feedback/v1/feedback.proto",
}
