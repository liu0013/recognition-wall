// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type FeedbackServiceHTTPServer interface {
	CreateFeedback(context.Context, *CreateFeedbackRequest) (*CreateFeedbackReply, error)
	DeleteFeedback(context.Context, *DeleteFeedbackRequest) (*DeleteFeedbackReply, error)
	GetFeedback(context.Context, *GetFeedbackRequest) (*GetFeedbackReply, error)
	Like(context.Context, *LikeRequest) (*LikeReply, error)
	ListFeedback(context.Context, *ListFeedbackRequest) (*ListFeedbackReply, error)
	UpdateFeedback(context.Context, *UpdateFeedbackRequest) (*UpdateFeedbackReply, error)
}

func RegisterFeedbackServiceHTTPServer(s *http.Server, srv FeedbackServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/feedback/", _FeedbackService_CreateFeedback0_HTTP_Handler(srv))
	r.PUT("/v1/feedback/{id}", _FeedbackService_UpdateFeedback0_HTTP_Handler(srv))
	r.DELETE("/v1/feedback/{id}", _FeedbackService_DeleteFeedback0_HTTP_Handler(srv))
	r.GET("/v1/feedback/{id}", _FeedbackService_GetFeedback0_HTTP_Handler(srv))
	r.GET("/v1/feedback/", _FeedbackService_ListFeedback0_HTTP_Handler(srv))
	r.PUT("/v1/feedback/{id}/like", _FeedbackService_Like0_HTTP_Handler(srv))
}

func _FeedbackService_CreateFeedback0_HTTP_Handler(srv FeedbackServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateFeedbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.feedback.v1.FeedbackService/CreateFeedback")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateFeedback(ctx, req.(*CreateFeedbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateFeedbackReply)
		return ctx.Result(200, reply)
	}
}

func _FeedbackService_UpdateFeedback0_HTTP_Handler(srv FeedbackServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFeedbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.feedback.v1.FeedbackService/UpdateFeedback")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateFeedback(ctx, req.(*UpdateFeedbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateFeedbackReply)
		return ctx.Result(200, reply)
	}
}

func _FeedbackService_DeleteFeedback0_HTTP_Handler(srv FeedbackServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFeedbackRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.feedback.v1.FeedbackService/DeleteFeedback")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteFeedback(ctx, req.(*DeleteFeedbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFeedbackReply)
		return ctx.Result(200, reply)
	}
}

func _FeedbackService_GetFeedback0_HTTP_Handler(srv FeedbackServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFeedbackRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.feedback.v1.FeedbackService/GetFeedback")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFeedback(ctx, req.(*GetFeedbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFeedbackReply)
		return ctx.Result(200, reply)
	}
}

func _FeedbackService_ListFeedback0_HTTP_Handler(srv FeedbackServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFeedbackRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.feedback.v1.FeedbackService/ListFeedback")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFeedback(ctx, req.(*ListFeedbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFeedbackReply)
		return ctx.Result(200, reply)
	}
}

func _FeedbackService_Like0_HTTP_Handler(srv FeedbackServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.feedback.v1.FeedbackService/Like")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Like(ctx, req.(*LikeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikeReply)
		return ctx.Result(200, reply)
	}
}

type FeedbackServiceHTTPClient interface {
	CreateFeedback(ctx context.Context, req *CreateFeedbackRequest, opts ...http.CallOption) (rsp *CreateFeedbackReply, err error)
	DeleteFeedback(ctx context.Context, req *DeleteFeedbackRequest, opts ...http.CallOption) (rsp *DeleteFeedbackReply, err error)
	GetFeedback(ctx context.Context, req *GetFeedbackRequest, opts ...http.CallOption) (rsp *GetFeedbackReply, err error)
	Like(ctx context.Context, req *LikeRequest, opts ...http.CallOption) (rsp *LikeReply, err error)
	ListFeedback(ctx context.Context, req *ListFeedbackRequest, opts ...http.CallOption) (rsp *ListFeedbackReply, err error)
	UpdateFeedback(ctx context.Context, req *UpdateFeedbackRequest, opts ...http.CallOption) (rsp *UpdateFeedbackReply, err error)
}

type FeedbackServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFeedbackServiceHTTPClient(client *http.Client) FeedbackServiceHTTPClient {
	return &FeedbackServiceHTTPClientImpl{client}
}

func (c *FeedbackServiceHTTPClientImpl) CreateFeedback(ctx context.Context, in *CreateFeedbackRequest, opts ...http.CallOption) (*CreateFeedbackReply, error) {
	var out CreateFeedbackReply
	pattern := "/v1/feedback/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.feedback.v1.FeedbackService/CreateFeedback"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackServiceHTTPClientImpl) DeleteFeedback(ctx context.Context, in *DeleteFeedbackRequest, opts ...http.CallOption) (*DeleteFeedbackReply, error) {
	var out DeleteFeedbackReply
	pattern := "/v1/feedback/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.feedback.v1.FeedbackService/DeleteFeedback"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackServiceHTTPClientImpl) GetFeedback(ctx context.Context, in *GetFeedbackRequest, opts ...http.CallOption) (*GetFeedbackReply, error) {
	var out GetFeedbackReply
	pattern := "/v1/feedback/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.feedback.v1.FeedbackService/GetFeedback"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackServiceHTTPClientImpl) Like(ctx context.Context, in *LikeRequest, opts ...http.CallOption) (*LikeReply, error) {
	var out LikeReply
	pattern := "/v1/feedback/{id}/like"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.feedback.v1.FeedbackService/Like"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackServiceHTTPClientImpl) ListFeedback(ctx context.Context, in *ListFeedbackRequest, opts ...http.CallOption) (*ListFeedbackReply, error) {
	var out ListFeedbackReply
	pattern := "/v1/feedback/"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.feedback.v1.FeedbackService/ListFeedback"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackServiceHTTPClientImpl) UpdateFeedback(ctx context.Context, in *UpdateFeedbackRequest, opts ...http.CallOption) (*UpdateFeedbackReply, error) {
	var out UpdateFeedbackReply
	pattern := "/v1/feedback/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.feedback.v1.FeedbackService/UpdateFeedback"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
